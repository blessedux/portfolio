var canvas, context, totalGifFrames, buffer, gif, pixels;

function setupHistory() {
    if (!HISTORY_ENABLED)
        return;
    var State = History.getState();
    var url = State.url.split("://")[1];
    if (State.hash == "/?skipTest") {
        skipFPSCheck = true;
        url = '/blessedux';
    }
    var urlArr = url.split("/");

    if (urlArr[3]) // if blessedux project
        preload('blessedux', urlArr[3]);//preload(urlArr[2], urlArr[3]);

    else if (urlArr[2]) // if project
        preload(urlArr[1], urlArr[2]);

    else if (urlArr[1] && urlArr[1] !== 'blessedux') { // if author
        preload(urlArr[1]);
        if (MOBILE_VERSION)
            selected = 0;
    } else {
        preload('blessedux');
        selected = Math.floor(Math.random() * 6); // Show random sculpture by default
        if (MOBILE_VERSION)
            selected = 0;
    }

    History.Adapter.bind(window, 'statechange', function () {
        var State = History.getState();
    });

    ArraySeed = {random: new Math.seedrandom('marpi')};
}


function screenshot(type) {
    if (type === null)
        type = "thumbnail";
    if (!asciiShader.enabled && type == "thumbnail")
        return;

    if (selected === -1)
        return;

    var num = 1;

    var windowWidth = 1200;
    var windowHeight = 630;

    if (type == "wallpaper") {
        windowWidth = window.screen.availWidth;
        windowHeight = window.screen.availHeight;
        if (window.devicePixelRatio) {
            windowWidth *= window.devicePixelRatio;
            windowHeight *= window.devicePixelRatio;
        }
        if (windowWidth >= 1920) {
            windowWidth = 1920;
            windowHeight = 1080;
        }
        num = 6;
    }
    if (type == "gif") {
        canvas = document.createElement('canvas');
        canvas.width = 300;
        canvas.height = 300;

        context = canvas.getContext('2d');

        totalGifFrames = 120;

        buffer = new Uint8Array(canvas.width * canvas.height * totalGifFrames * 5);
        gif = new GifWriter(buffer, canvas.width, canvas.height, {loop: 0});

        pixels = new Uint8Array(canvas.width * canvas.height);

        windowWidth = canvas.width;
        windowHeight = canvas.height;
        num = totalGifFrames;
    }

    nextRenderScreenshot = {enabled: true, width: windowWidth, height: windowHeight, type: type, id: 0, num: num};

    render();

}


function addFrame() {
    context.drawImage(renderer.domElement, 0, 0);
    var data = context.getImageData(0, 0, canvas.width, canvas.height).data;
    var palette = [];
    for (var j = 0, k = 0, jl = data.length; j < jl; j += 4, k++) {
        var r = Math.floor(data[ j + 0 ] * 0.02) * 50;
        var g = Math.floor(data[ j + 1 ] * 0.02) * 50;
        var b = Math.floor(data[ j + 2 ] * 0.02) * 50;
        var color = r << 16 | g << 8 | b << 0;
        var index = palette.indexOf(color);
        if (index === -1) {
            pixels[ k ] = palette.length;
            palette.push(color);
        } else {
            pixels[ k ] = index;
        }
    }

    var powof2 = 1;
    while (powof2 < palette.length)
        powof2 <<= 1;
    palette.length = powof2;

    while (palette.length > 256) {
        var palette2 = [];

        for (var i = 0; i < palette.length; i = i + 2) {
            palette2.push(palette[i]);
        }
        palette = palette2;
    }
    gif.addFrame(0, 0, canvas.width, canvas.height, pixels, {palette: new Uint32Array(palette), delay: 5});

}


function finish() {

    var string = '';
    for (var i = 0, l = gif.end(); i < l; i++) {
        string += String.fromCharCode(buffer[ i ]);
    }
    // force browser download
    var link = document.createElement('a');
    link.download = "gif-" + user + "-" + repo + "-" + nextRenderScreenshot.id+".gif";
    link.href = 'data:image/gif;base64,' + btoa(string);
    link.target = "_blank";
    document.body.appendChild(link);
    link.click();
    link.remove();
}


function screenshotCompose() {
    var data = renderer.domElement.toDataURL('image/jpg');

    var url0 = currentLocation.split("/");
    if (url0[0] == 'blessedux' && url0[2])
    {
        user = url0[1];
        repo = url0[2];
    } else
    if (url0[0] == 'blessedux')
    {
        user = '';
        repo = url0[1];
    } else
    {
        user = url0[0];
        repo = url0[1];
    }

    if (nextRenderScreenshot.type == "thumbnail") {
        var windowWidth = 1200;
        var windowHeight = 630;
        canvas = document.createElement('canvas');
        canvas.width = windowWidth;
        canvas.height = windowHeight;

        context = canvas.getContext('2d');
        context.drawImage(renderer.domElement, 0, 0);

        context.fillStyle = "#FFFFFF";
        context.shadowColor = '#000000';
        context.shadowOffsetX = 0;
        context.shadowOffsetY = 0;
        context.shadowBlur = 3 * dpr;
        context.textAlign = 'right';
        context.font = 40 + "px BTMono";
        context.fillText(globalDB[selected].username, windowWidth - 50, windowHeight - 80);
        context.font = 20 + "px BTMono";
        context.fillText(globalDB[selected].project, windowWidth - 50, windowHeight - 50);
        data = canvas.toDataURL("image/jpg");

        var output = data.replace(/^data:image\/(png|jpg);base64,/, "");
        //window.open(data, "test");
        var url = SERVER + "api/og?action=set&user=" + user + "&repo=" + repo + "&format=json";
        $.post(url, {screen: output, user: user}, function (data) {
            //console.log(data);
        });

    } else if (nextRenderScreenshot.type == "wallpaper") {
        var filename = "wallpaper-" + user + "-" + repo + "-" + nextRenderScreenshot.id;
        $("#wallpaper" + nextRenderScreenshot.id).attr("src", data).closest('a').attr('href', data).attr('download', filename);
    } else if (nextRenderScreenshot.type == "gif") {
        if (nextRenderScreenshot.id < nextRenderScreenshot.num - 1) {
            addFrame();
        } else {
            finish();
        }
    }
}


function compare(a, b) {
    if (a.updated_at < b.updated_at)
        return 1;
    if (a.updated_at > b.updated_at)
        return -1;
    return 0;
}


function shuffle(array) {
    var currentIndex = array.length, temporaryValue, randomIndex;

    while (0 !== currentIndex) {

        randomIndex = Math.floor(ArraySeed.random() * currentIndex);
        currentIndex -= 1;

        temporaryValue = array[currentIndex];
        array[currentIndex] = array[randomIndex];
        array[randomIndex] = temporaryValue;
    }

    return array;
}


function toggleFullScreen() {
    if (!document.fullscreenElement && !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement) {  // current working methods
        if (document.documentElement.requestFullscreen) {
            document.documentElement.requestFullscreen();
        } else if (document.documentElement.msRequestFullscreen) {
            document.documentElement.msRequestFullscreen();
        } else if (document.documentElement.mozRequestFullScreen) {
            document.documentElement.mozRequestFullScreen();
        } else if (document.documentElement.webkitRequestFullscreen) {
            document.documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
        }
    } else {
        if (document.exitFullscreen) {
            document.exitFullscreen();
        } else if (document.msExitFullscreen) {
            document.msExitFullscreen();
        } else if (document.mozCancelFullScreen) {
            document.mozCancelFullScreen();
        } else if (document.webkitExitFullscreen) {
            document.webkitExitFullscreen();
        }
    }
}

function isPageHidden() {
    return document.hidden || document.msHidden || document.webkitHidden || document.mozHidden;
}

window.mobilecheck = function () {
    var check = false;
    (function (a) {
        if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4)))
            check = true;
    })(navigator.userAgent || navigator.vendor || window.opera);
    return check;
};


window.mobileAndTabletcheck = function () {
    var check = false;
    (function (a) {
        if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4)))
            check = true;
    })(navigator.userAgent || navigator.vendor || window.opera);
    return check;
};// Use GitHub API directly instead of remote server
var SERVER = "https://api.github.com/";

var TYPES_STRING = 'unknown, JavaScript, HTML, Ruby, Java, PHP, Python, C, C++, CSS, Shell, C#, Objective-C, Perl, CoffeeScript, Go, Scala, VimL, R, Haskell, Clojure, Lua, Groovy, Emacs Lisp, Erlang, Puppet, TeX, Swift, Matlab, ActionScript, Arduino, Batchfile, GLSL, OCaml, Tcl, Visual Basic, TypeScript, D, Assembly, Common Lisp, Dart, Prolog, XSLT, PowerShell, Scheme, FORTRAN, Rust, ASP, Processing, Julia, F#, Elixir, ColdFusion, Vala, Apex, Racket, VHDL, Pascal, Smalltalk, Haxe, Verilog, Logos, Delphi, Makefile, Kotlin, AutoHotkey, CMake, QMake, UnrealScript, LiveScript, HaXe, BlitzBasic, IDL, Standard ML, XML, SQL, OpenEdge ABL, Objective-C++, AppleScript, SuperCollider, PureScript, Eiffel, Elm, Gosu, M, Smarty, Pure Data, nesC, XQuery, SQF, Scilab, DOT, Postscript, Cuda, Slash, Max, Game Maker Language, AutoIt, Mathematica, SourcePawn, Groff';
var TYPES = TYPES_STRING.split(', ');

var MOBILE_VERSION = window.mobileAndTabletcheck();
var SKIP_INTRO = false;
var HISTORY_ENABLED = true;
var MIN_FPS = 10;

var ZOOM_IN_MIN = 300;
var ZOOM_IN_MAX = 900;
var ZOOM_IN = 500;

var asciiShader = {enabled: true};var alphabetTexture;
var fontWidth = 10;
var fontHeight = 14;
var uniforms;
var alphabetCanvas;
var dpr = 1;
var charNum = 128;
var renderWindow = {width: window.innerWidth, height: window.innerHeight};
var asciiMode = 0;

function initPostprocessing() {

    var image = new Image(), texture = new THREE.Texture(image);
    var hash = document.createElement("canvas");
    hash.style.opacity = 0;
    image.onload = function () {
        texture.needsUpdate = true;
    };
    image.src = hash.toDataURL();

    var alphabetImage = new Image();
    alphabetCanvas = document.createElement('canvas');
    alphabetCanvas.setAttribute("id", "alphabetCanvas");

    alphabetTexture = new THREE.Texture(alphabetCanvas);
    alphabetTexture.needsUpdate = true;
    alphabetTexture.minFilter = THREE.NearestFilter;

    updateAlphabet();

    asciiShader.scene = new THREE.Scene();
    asciiShader.camera = new THREE.OrthographicCamera(renderWindow.width / -2, renderWindow.width / 2, renderWindow.height / 2, renderWindow.height / -2, -10000, 10000);
    asciiShader.camera.position.z = 100;

    var pars = {minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBFormat};
    asciiShader.rtTextureDepth = new THREE.WebGLRenderTarget(renderWindow.width, renderWindow.height, pars);
    asciiShader.rtTextureColor = new THREE.WebGLRenderTarget(renderWindow.width, renderWindow.height, pars);
    asciiShader.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(1, 1), null);
    asciiShader.quad.position.z = -500;
    asciiShader.scene.add(asciiShader.quad);
}

function updateAlphabet(string) {
    if (!string || string === "")
        string = '.\'`^",:;Il!i~+_-?][}{1)(/tfjrxnuvczmwqpdbkhaoXYUJCLQ0OZ#MW&8%B@$';
    alphabetCanvas.width = charNum * fontWidth * dpr;
    alphabetCanvas.height = fontHeight * dpr;
    var ctx = alphabetCanvas.getContext("2d");
    ctx.fillStyle = "#000000";
    ctx.fillRect(0, 0, alphabetCanvas.width, alphabetCanvas.height);
    ctx.fillStyle = "#FFFFFF";
    ctx.shadowColor = '#FFFFFF';
    ctx.shadowOffsetX = 0;
    ctx.shadowOffsetY = 0;
    ctx.shadowBlur = 3 * dpr;
    ctx.font = fontHeight * 1.0 * dpr + "px BTMono";
    ctx.scale(1, -1);
    ctx.textAlign = 'center';
    for (var i = 0; i < charNum; i++) {
        var id = Math.floor(string.length * (1 - (i + 1) / (charNum)));
        var letter = string.substr(id, 1);
        for (var j = 0; j < 3; j++) {
            ctx.fillText(letter, (0.5 + i * fontWidth + fontWidth / 2 - 0.5) * dpr, -2.5 * dpr);
        }
    }
    alphabetTexture.needsUpdate = true;
    //document.body.appendChild(alphabetCanvas);

    console.log(
            " " + "\n" +
            " ▄████▄  ▒█████ ▒█████▄▓█████ ▒█████  ██▓    ▒█████   ▄███▓██   ██▓" + "\n" +
            "▒██▀ ▀█ ▒██▒  ██▒██▀ ██▓█   ▀▒██▒  ██▓██▒   ▒██▒  ██▒██▒ ▀█▒██  ██▒" + "\n" +
            "▒▓█    ▄▒██░  ██4██   █▒███  ▒██░  ██▒██3   ▒██░  ██▒██░▄▄▄░▒██ ██░" + "\n" +
            "▒▓▓▄ ▄██▒██   ██░██▄ ▄█▒▓█  ▄▒██   ██▒██░   ▒██   ██░▓█  ██▓6 ▐██▓░" + "\n" +
            "▒ ▓███▀ ░ ████▓▒░████▓░░▒████░ ████▓▒░██████░ ████▓▒░▒▓███▀▒░ ██▒▓░" + "\n" +
            "8 ░▒ ▒  ░ ▒░▒░▒░ ▒9▓  ▒░░ ▒░ ░ ▒░▒░▒░2 ▒░▓  ░ ▒░▒░▒░ ░▒   ▒  ██▒▒▒ " + "\n" +
            "  ░  ▒    7 ▒ ▒░ ░ ▒  ▒ ░ ░  ░ ░ ▒ ▒░░ ░ ▒  ░ ░ ▒ ▒░  ░   0▓██ ░▒░ " + "\n" +
            "  ░     ░ ░ ░ ▒  ░ ░  ░   ░1 ░ ░ ░ ▒   ? ░  ░ ░ 5 ▒ ░ ░   ░▒ ▒ ░░  " + "\n" +
            "  ░   ~     ░ ░    ░      ░  ░   ░ ░     ░  ░   ░ ░       ░░ ░     " + "\n" +
            "                 ░                                         ░ ░     "
            )
}

function resizePostprocessing() {
    if (!asciiShader.camera)
        return;
    renderer.setSize(windowWidth, windowHeight);
    renderer.domElement.style.position = "absolute";
    renderer.domElement.style.top = headerHeight + "px";

    renderWindow = {width: windowWidth, height: windowHeight};

    asciiShader.camera.left = renderWindow.width / -2;
    asciiShader.camera.right = renderWindow.width / 2;
    asciiShader.camera.top = renderWindow.height / 2;
    asciiShader.camera.bottom = renderWindow.height / -2;
    asciiShader.camera.updateProjectionMatrix();

    asciiShader.quad.scale.x = renderWindow.width;
    asciiShader.quad.scale.y = renderWindow.height;

    var pars = {minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBFormat};
    asciiShader.rtTextureColor = new THREE.WebGLRenderTarget(renderWindow.width, renderWindow.height, pars);
    asciiShader.material = new THREE.ShaderMaterial({
        uniforms: {
            inputTexture: {type: 't', value: asciiShader.rtTextureColor},
            asciiTexture: {type: 't', value: alphabetTexture},
            hashTexture: {type: 't', value: THREE.ImageUtils.loadTexture("/dist/images/fontHash.png")}, //
            mode: {type: 'f', value: asciiMode},
            numChars: {type: 'f', value: charNum},
            rx: {type: 'f', value: renderWindow.width},
            ry: {type: 'f', value: renderWindow.height},
            charMapSize: {type: 'f', value: charNum * fontWidth},
            fontSize: {type: 'v2', value: new THREE.Vector2(fontWidth, fontHeight)}

        },
        vertexShader: document.getElementById('vertexShader').textContent,
        fragmentShader: document.getElementById('fragmentShader').textContent,
        side: THREE.DoubleSide
    });

    uniforms = asciiShader.material.uniforms;

    var material = new THREE.ShaderMaterial({
        fragmentShader: asciiShader.material.fragmentShader,
        vertexShader: asciiShader.material.vertexShader,
        uniforms: uniforms
    });

    asciiShader.quad.material = material;
}var shading = THREE.FlatShading;//THREE.SmoothShading//
var shininess = 50;

var sphere, sphere2, plane, title;
var start = Date.now();
var geoms = [];
var materials = [];
var meshFaceMaterial;
var Seed;
var rolloverMesh;
var sampleMat;
var rollOverObject, rollOverObject2;
var timer = 0;

var size = 0.5;

function bugGlobals() {
    generateGeometries();

    rollOverObject = new THREE.Group();
    rollOverObject2 = new THREE.Group();
    scene.add(rollOverObject);
    scene.add(rollOverObject2);

    for (var i = 0; i < TYPES.length; i++) {
        var greymat = new THREE.MeshPhongMaterial({color: 0, shininess: shininess, shading: shading, wireframe: wireframe, wireframeLinewidth: 15,
            side: THREE.DoubleSide});

        setColor(greymat, i);
        materials.push(greymat);
    }
    meshFaceMaterial = new THREE.MeshFaceMaterial(materials);

    sampleMat = new THREE.MeshPhongMaterial({color: 0xffffff, shininess: shininess, shading: shading, wireframe: wireframe, wireframeLinewidth: 15,
        side: THREE.DoubleSide});
}

function setColor(sampleMat, id) {
    sampleMat.color.setHSL(Math.cos(id * 4.1) / 2 + 0.5, 0.8, 0.6);
}

function generateGeometries() {
    addGeom(new THREE.TetrahedronGeometry(20, 1), [0, 0, 0], [40, 0, 0], [1, 1, 1]);

    // TEST AREA
    for (var i = 0; i < 100; i++) {
        //addGeom(Minerals(new THREE.CircleGeometry(15, 6)), [0, 0, 0], [0, 20, 0], [2, 1, 1])

    }

    // MINERALS PETTLE
    addGeom(Minerals(Pettle()), [0, 0, 0], [0, 20, 0], [1, 1, 1]);
    addGeom(Minerals(Pettle()), [0, 0, -Math.PI / 2], [20, 0, 0], [1, 1, 1]);
    addGeom(Minerals(new THREE.CircleGeometry(15, 6)), [0, 0, Math.PI / 2], [40, 0, 0], [1, 1, 1]);
    addGeom(Minerals(new THREE.CircleGeometry(15, 6)), [0, 0, 0], [30, 0, 0], [1, 1, 1]);

    // MINERALS HORNS
    addGeom(Minerals(new THREE.CylinderGeometry(3, 10, 20, 3, 1)), [0, 0, 0], [0, 20, 0], [1, 1, 1]);
    addGeom(Minerals(new THREE.CylinderGeometry(3, 10, 20, 3, 1)), [0, 0, -Math.PI / 2], [20, 0, 0], [1, 1, 1]);
    addGeom(Minerals(new THREE.CylinderGeometry(3, 10, 20, 3, 1)), [0, 0, Math.PI / 2], [40, 0, 0], [1, 1, 1]);
    addGeom(Minerals(new THREE.CylinderGeometry(3, 10, 20, 3, 1)), [0, 0, 0], [30, 0, 0], [1, 1, 1]);

    // BUBBLES
    addGeom(Grid(new THREE.SphereGeometry(4, 6, 4)), [0, 0, 0], [30, 0, 0], [1, 1, 1]);
    addGeom(Grid(new THREE.SphereGeometry(4, 6, 4)), [-Math.PI / 2, 0, 0], [30, 0, 0], [1, 1, 1]);
    addGeom(Grid(new THREE.SphereGeometry(4, 6, 4)), [0, Math.PI / 2, 0], [30, 0, 0], [1, 1, 1]);
    addGeom(Grid(new THREE.SphereGeometry(4, 6, 4)), [0, -Math.PI / 2, 0], [30, 0, 0], [1, 1, 1]);

    // MINERALS TRIANGLES
    addGeom(Minerals(new THREE.TetrahedronGeometry(20, 0)), [0, 0, 0], [0, 20, 0], [1, 1, 1]);
    addGeom(Minerals(new THREE.TetrahedronGeometry(20, 0)), [0, 0, -Math.PI / 2], [20, 0, 0], [1, 1, 1]);
    addGeom(Minerals(new THREE.TetrahedronGeometry(20, 0)), [0, 0, Math.PI / 2], [40, 0, 0], [1, 1, 1]);
    addGeom(Minerals(new THREE.TetrahedronGeometry(20, 0)), [0, 0, 0], [30, 0, 0], [1, 1, 1]);

    // SPIKES
    addGeom(new THREE.CylinderGeometry(0, 6, 60, 5), [-Math.PI / 2, 0, 0], [0, 0, -30], [1.5, 0.7, 1]);
    addGeom(new THREE.CylinderGeometry(0, 6, 60, 5), [-Math.PI / 2, 0, 0], [0, 0, -30], [1, 1, 1]);
    addGeom(new THREE.CylinderGeometry(0, 6, 60, 5), [-Math.PI / 2, 0, 0], [20, 20, 0], [1, 1, 1]);
    addGeom(new THREE.CylinderGeometry(0, 6, 70, 4), [0, 0, 0], [0, 0, 0], [1, 1, 1]);
    addGeom(new THREE.CylinderGeometry(0, 6, 80, 4), [0, -Math.PI / 2, 0], [0, 0, 0], [1, 1, 1]);

    // MINERALS DIAMONDS
    addGeom(Minerals(new THREE.OctahedronGeometry(15, 0)), [0, 0, 0], [0, 20, 0], [1, 1, 1]);
    addGeom(Minerals(new THREE.OctahedronGeometry(15, 0)), [0, 0, -Math.PI / 2], [20, 0, 0], [1, 1, 1]);
    addGeom(Minerals(new THREE.OctahedronGeometry(15, 0)), [0, 0, Math.PI / 2], [40, 0, 0], [1, 1, 1]);
    addGeom(Minerals(new THREE.OctahedronGeometry(15, 0)), [0, 0, 0], [30, 0, 0], [1, 1, 1]);

    // GRID CUBES
    addGeom(Grid(new THREE.CylinderGeometry(5, 5, 7, 4, 1)), [0, 0, 0], [30, 0, 0], [1, 1, 1]);
    addGeom(Grid(new THREE.CylinderGeometry(5, 5, 7, 4, 1)), [-Math.PI / 2, 0, 0], [30, 0, 0], [1, 1, 1]);
    addGeom(Grid(new THREE.CylinderGeometry(5, 5, 7, 4, 1)), [0, Math.PI / 2, 0], [30, 0, 0], [1, 1, 1]);
    addGeom(Grid(new THREE.CylinderGeometry(5, 5, 7, 4, 1)), [0, -Math.PI / 2, 0], [30, 0, 0], [1, 1, 1]);

    // GRID TRIANGLES
    addGeom(Grid(new THREE.TetrahedronGeometry(6, 0)), [0, 0, 0], [30, 0, 0], [1, 1, 1]);
    addGeom(Grid(new THREE.TetrahedronGeometry(6, 0)), [-Math.PI / 2, 0, 0], [30, 0, 0], [1, 1, 1]);
    addGeom(Grid(new THREE.TetrahedronGeometry(6, 0)), [0, Math.PI / 2, 0], [30, 0, 0], [1, 1, 1]);
    addGeom(Grid(new THREE.TetrahedronGeometry(6, 0)), [0, -Math.PI / 2, 0], [30, 0, 0], [1, 1, 1]);

    // SINGLE ROCKS
    addGeom(new THREE.OctahedronGeometry(15, 0), [0, 0, 0], [0, -40, 0], [1, 1, 1]);
    addGeom(new THREE.CylinderGeometry(15, 15, 20, 4, 1), [0, 0, 0], [0, 0, 0], [1, 1, 1]);
    addGeom(new THREE.TetrahedronGeometry(20, 0), [0, 0, 0], [40, 0, 0], [1, 1, 1]);
    addGeom(new THREE.TetrahedronGeometry(20, 0), [0, 0, 0], [20, 0, 0], [1, 1, 1]);
    addGeom(new THREE.TetrahedronGeometry(20, 0), [0, 0, 0], [0, -40, 0], [1, 1, 1]);

    // CINDER BLOCKS
    addGeom(new THREE.CylinderGeometry(7, 7, 40, 3, 1), [0, 0, 0], [30, 0, 0], [1, 1, 1]);
    addGeom(new THREE.CylinderGeometry(7, 7, 40, 3, 1), [0, 0, Math.PI / 2], [30, 0, 0], [1, 1, 1]);
    addGeom(new THREE.CylinderGeometry(3, 10, 40, 3, 1), [0, 0, 0], [0, 20, 0], [1, 1, 1]);
    addGeom(new THREE.CylinderGeometry(10, 3, 40, 4, 1), [0, 0, 0], [0, 20, 0], [1, 1, 1]);
    addGeom(new THREE.CylinderGeometry(10, 10, 40, 4, 1), [0, 0, 0], [0, -40, 30], [1, 1, 1]);

    // PETTLES
    addGeom(Pettle(), [0, 0, 0], [30, 0, 0], [1, 1, 1]);
    addGeom(Pettle(), [-Math.PI / 2, 0, 0], [30, 0, 0], [1, 1, 1]);
    addGeom(new THREE.CircleGeometry(20, 10), [0, 0, 0], [40, 0, 0], [1, 1, 1]);
    addGeom(new THREE.CircleGeometry(30, 10), [0, 0, 0], [0, -30, 0], [1, 1, 1]);
    addGeom(new THREE.PlaneGeometry(30, 30), [0, 0, 0], [30, 0, 0], [1, 1, 1]);
    addGeom(new THREE.PlaneGeometry(40, 30), [0, 0, 0], [30, -30, 0], [1, 1, 1]);
    addGeom(Pettle(), [0, Math.PI / 2, 0], [30, 0, 0], [1, 1, 1]);
    addGeom(Pettle(), [0, -Math.PI / 2, 0], [30, 0, 0], [1, 1, 1]);

    // MINERAL ANTENNAS
    addGeom(Minerals(Antenna(2)), [0, 0, 0], [0, 20, 0], [1, 1, 1]);
    addGeom(Minerals(Antenna(2)), [0, 0, -Math.PI / 2], [20, 0, 0], [1, 1, 1]);

    // DOUGHNUTS
    addGeom(new THREE.TorusGeometry(20, 7, 4, 10), [0, 0, 0], [0, 20, 0], [1, 1, 1]);
    addGeom(new THREE.TorusGeometry(20, 7, 4, 10), [0, 0, 0], [40, 0, 0], [1, 1, 1]);
    addGeom(new THREE.TorusGeometry(20, 7, 10, 10), [0, 0, 0], [20, 10, 0], [1, 1, 1]);
    addGeom(new THREE.TorusGeometry(20, 5, 4, 3), [0, 0, 0], [40, 0, 0], [1, 1, 1]);
    addGeom(new THREE.TorusGeometry(20, 5, 4, 5), [0, 0, 0], [40, 0, 0], [1, 1, 1]);
    addGeom(new THREE.TorusGeometry(20, 2, 4, 10), [0, 0, 0], [40, 0, 0], [1, 1, 1]);
    addGeom(new THREE.TorusGeometry(20, 4, 4, 10), [0, 0, 0], [40, 0, 0], [1, 1, 1]);

    // TENTACLES
    addGeom(Tentacle(4), [0, -Math.PI / 2, 0], [0, 0, 0], [1, 1, 1]);
    addGeom(Tentacle(5), [0, 0, 0], [0, 0, 0], [1, 1, 1]);
    addGeom(Tentacle(6), [0, Math.PI / 2, 0], [0, 0, 0], [1, 1, 1]);

    // LEGS
    addGeom(Leg(4, 3), [0, 0, 0], [0, 0, 0], [1, 1, 1]);
    addGeom(Leg(4, 6), [0, 0, 0], [0, 0, 0], [1, 1, 1]);
    addGeom(Leg(5, 3), [0, 0, Math.PI / 2], [0, 0, 0], [1, 1, 1]);
    addGeom(Leg(6, 4), [0, -Math.PI / 2, 0], [0, 0, 0], [1, 1, 1]);
    addGeom(Leg(7, 3), [0, Math.PI / 2, Math.PI / 2], [0, 0, 0], [1, 1, 1]);
    addGeom(Leg(8, 5), [0, 0, 0], [0, 0, 0], [1, 1, 1]);
    addGeom(Leg(9, 2), [0, 0, Math.PI / 2], [0, 0, 0], [1, 1, 1]);
    addGeom(Leg(10, 6), [0, -Math.PI / 2, 0], [0, 0, 0], [1, 1, 1]);
    addGeom(Leg(11, 3), [0, Math.PI / 2, Math.PI / 2], [0, 0, 0], [1, 1, 1]);

    // ANTENNAS
    addGeom(Antenna(4), [0, -Math.PI / 2, 0], [0, 0, 0], [1, 1, 1]);
    addGeom(Antenna(5), [0, 0, 0], [0, 0, 0], [1, 1, 1]);
    addGeom(Antenna(6), [0, Math.PI / 2, 0], [0, 0, 0], [1, 1, 1]);
    addGeom(Antenna(7), [Math.PI / 2, Math.PI / 2, 0], [0, 0, 0], [1, 1, 1]);

    // GRID EMPTY TRIANGLES
    addGeom(Grid(new THREE.TorusGeometry(10, 2, 4, 3)), [0, 0, 0], [30, 0, 0], [1, 1, 1]);
    addGeom(Grid(new THREE.TorusGeometry(10, 2, 4, 3)), [-Math.PI / 2, 0, 0], [30, 0, 0], [1, 1, 1]);
    addGeom(Grid(new THREE.TorusGeometry(10, 2, 4, 3)), [0, Math.PI / 2, 0], [30, 0, 0], [1, 1, 1]);
    addGeom(Grid(new THREE.TorusGeometry(10, 2, 4, 3)), [0, -Math.PI / 2, 0], [30, 0, 0], [1, 1, 1]);

    // GRID CIRCLES
    addGeom(Grid(new THREE.TorusGeometry(10, 2, 4, 5)), [0, 0, 0], [30, 0, 0], [1, 1, 1]);
    addGeom(Grid(new THREE.TorusGeometry(10, 2, 4, 5)), [-Math.PI / 2, 0, 0], [30, 0, 0], [1, 1, 1]);
    addGeom(Grid(new THREE.TorusGeometry(10, 2, 4, 5)), [0, Math.PI / 2, 0], [30, 0, 0], [1, 1, 1]);
    addGeom(Grid(new THREE.TorusGeometry(10, 2, 4, 5)), [0, -Math.PI / 2, 0], [30, 0, 0], [1, 1, 1]);
    addGeom(Grid(new THREE.TorusGeometry(13, 3, 3, 5)), [0, -Math.PI / 2, 0], [30, 0, 0], [1, 1, 1]);

    // MINERALS EMPTY TRIANGLES
    addGeom(Minerals(new THREE.TorusGeometry(10, 2, 4, 3)), [0, 0, 0], [0, 20, 0], [1, 1, 1]);
    addGeom(Minerals(new THREE.TorusGeometry(10, 2, 4, 3)), [0, 0, -Math.PI / 2], [20, 0, 0], [1, 1, 1]);
    addGeom(Minerals(new THREE.TorusGeometry(10, 2, 4, 3)), [0, 0, Math.PI / 2], [40, 0, 0], [1, 1, 1]);
    addGeom(Minerals(new THREE.TorusGeometry(10, 2, 4, 3)), [0, 0, 0], [30, 0, 0], [1, 1, 1]);

    // LONG STRAIGHT LINES
    addGeom(TentacleStraight(), [0, 0, 0], [0, 0, 0], [1, 1, 1]);
    addGeom(TentacleStraight(), [0, -Math.PI / 2, 0], [0, 0, 0], [1, 1, 1]);
    addGeom(TentacleStraight(), [0, Math.PI / 2, 0], [0, 0, 0], [1, 1, 1]);

    // PRETZELS
    addGeom(new THREE.TorusKnotGeometry(15, 3, 13, 3), [0, Math.PI / 2, 0], [40, 0, 0], [1, 1, 1]);
    addGeom(new THREE.TorusKnotGeometry(15, 3, 10, 3), [0, 0, 0], [40, 0, 0], [1, 1, 1]);
    addGeom(new THREE.TorusKnotGeometry(15, 3, 6, 3), [0, 0, 0], [40, 0, 0], [1, 1, 1]);
    addGeom(new THREE.TorusKnotGeometry(15, 3, 13, 3), [0, 0, 0], [40, 0, 0], [1, 1, 1]);

    // MINERALS LINES
    addGeom(Minerals(TentacleStraight()), [0, 0, 0], [0, 20, 0], [1, 1, 1]);
    addGeom(Minerals(TentacleStraight()), [0, 0, -Math.PI / 2], [20, 0, 0], [1, 1, 1]);
    addGeom(Minerals(TentacleStraight()), [0, 0, Math.PI / 2], [40, 0, 0], [1, 1, 1]);
    addGeom(Minerals(TentacleStraight()), [0, 0, 0], [30, 0, 0], [1, 1, 1]);
}

function addGeom(geom, rotationArray, translationArray, scaleArray) {
    geom.applyMatrix(new THREE.Matrix4().scale(new THREE.Vector3(scaleArray[0], scaleArray[1], scaleArray[2])));
    geom.applyMatrix(new THREE.Matrix4().makeRotationX(rotationArray[0]));
    geom.applyMatrix(new THREE.Matrix4().makeRotationY(rotationArray[1]));
    geom.applyMatrix(new THREE.Matrix4().makeRotationZ(rotationArray[2]));
    geom.applyMatrix(new THREE.Matrix4().makeTranslation(translationArray[0], translationArray[1], translationArray[2]));
    geoms.push(geom);
}

function bug(scene, db) {
    for (var i = 0; i < 1; i++) {
        var geometry = new THREE.Geometry();

        var globalSize = 0;

        for (var j = 0; j < db.files.length; j++) {
            var id = j % db.files.length;
            var type = db.files[id].type;
            var pregeom = geoms[type];
            var mat = materials[type];
            createPregeom(geometry, db.files[id].size, pregeom, type);
            globalSize += db.files[id].size;
        }

        var sizePerc = globalSize / 1000000;
        if (sizePerc > 1)
            sizePerc = 1;
        db.speed = 0.001 + (1 - sizePerc) * 0.01;

        db.object = new THREE.Mesh(geometry, meshFaceMaterial);
        scene.add(db.object);

        db.object2 = new THREE.Mesh(geometry, meshFaceMaterial);
        db.object2.scale.x = -db.object.scale.x;
        scene.add(db.object2);

    }
}

function createPregeom(geometry, size, pregeom, type) {
    var fileScale = 0.1;
    var fileScaleOrg = 0.1;
    if (size) {
        fileScale = size / 300000;
        fileScaleOrg = size / 300000;
    }
    if (fileScale < 0.4) {
        fileScale = 0.4;
    }
    if (fileScale > 1) {
        fileScale = 1;
    }

    for (var k = 0; k < fileScale * 4; k++) {
        var submesh = new THREE.Mesh(pregeom, null);

        submesh.scale.x *= fileScale * 4;
        submesh.scale.y *= fileScale * 4;
        submesh.scale.z *= fileScale * 4;

        var randoms = [Math.sin((-1 + k * 0.3) * fileScaleOrg * 687 + 0.1) / 2 + 0.5, Math.sin((2 + k * 0.9) * fileScaleOrg * 456 + 0.2) / 2 + 0.5, Math.sin((1 + k) * fileScaleOrg * 546 + 0.3) / 2 + 0.5];

        submesh.rotation.set(randoms[0] * 7, randoms[1] * 7, randoms[2] * 7);

        var randoms2 = [Math.sin((2 + k) * fileScaleOrg * 413 + 0.1) / 2 + 0.5, Math.sin((2 + k) * fileScaleOrg * 543 + 0.2) / 2 + 0.5, Math.sin((2 + k) * fileScaleOrg * 123 + 0.3) / 2 + 0.5];

        submesh.position.x = (randoms2[1] - 0.5) * 100 * fileScale;
        submesh.position.y = (randoms2[0] - 0.5) * 100 * fileScale;
        submesh.position.z = (randoms2[2] - 0.5) * 100 * fileScale;

        submesh.updateMatrix();
        if (pregeom) {
            geometry.merge(pregeom, submesh.matrix, type);
        }
    }
}

function rolloverLanguage(language) {
    var o = [rollOverObject, rollOverObject2];
    if (!language) {
        if (rolloverMesh) {
            o[0].remove(rolloverMesh[0]);
            o[1].remove(rolloverMesh[1]);
        }
        rolloverMesh = null;
        return;
    }
    var id = analyze(language);
    var pregeom = new THREE.Geometry();
    var size = 200000;
    if (globalDB[selected]) {
        for (var i = 0; i < globalDB[selected].files.length; i++) {
            if (globalDB[selected].files[i].type == id) {
                size = globalDB[selected].files[i].size;
            }
        }
    }
    createPregeom(pregeom, size, geoms[id], id);
    var mat = sampleMat;
    setColor(sampleMat, id);
    rolloverMesh = [];
    for (var i = 0; i < 2; i++) {
        rolloverMesh[i] = new THREE.Mesh(pregeom, mat);
        rolloverMesh[i].scale.set(1 - 2 * i, 1, 1);
        o[i].add(rolloverMesh[i]);
    }
}

function Pettle() {
    var tentacleGeom = new THREE.SphereGeometry(15, 3, 4);
    var mesh = new THREE.Mesh(tentacleGeom, null);
    mesh.scale.z = 0.2;
    mesh.updateMatrix();
    mesh.geometry.applyMatrix(mesh.matrix);
    return(mesh.geometry);
}

function Minerals(geom, max) {
    if (!max)
        max = 4;
    var tentacleGeom = new THREE.Geometry();
    var dis = 0;
    for (var j = 0; j < max; j++) {
        var mesh = new THREE.Mesh(geom.clone(), null);
        mesh.position.set((25 - dis) / 3, dis / 2, 0);
        dis += 25 * (1 - (j + 1) / max);
        mesh.scale.set(1 - j / max, 1 - j / max, 1 - j / max);
        mesh.rotation.set(0, 0, 1.5 * j / max);
        mesh.updateMatrix();
        tentacleGeom.merge(mesh.geometry, mesh.matrix);
    }
    return(tentacleGeom);
}

function Leg(num, radius) {
    var tentacleGeom = new THREE.Geometry();
    for (var j = 0; j < 2; j++) {
        var randomPoints = [];
        for (var i = 0; i < num; i++) {
            randomPoints.push(new THREE.Vector3(-30 * i, -40 * Math.sin(i * 2), 0));
        }
        var randomSpline = new THREE.SplineCurve3(randomPoints);
        var geometry = new THREE.TubeGeometry(randomSpline, 3, radius, 7);
        var mesh = new THREE.Mesh(geometry, null);
        mesh.rotation.set(Math.sin(j), Math.sin(j + 1), Math.sin(j + 0.5));
        mesh.updateMatrix();
        tentacleGeom.merge(geometry, mesh.matrix);
    }
    return(tentacleGeom);
}

function Antenna(num) {
    var tentacleGeom = new THREE.Geometry();
    for (var j = 0; j < 2; j++) {
        var randomPoints = [];
        for (var i = 0; i < num; i++) {
            randomPoints.push(new THREE.Vector3(20 * i, 15 * Math.sin(j+i * num), 0));
        }
        var randomSpline = new THREE.SplineCurve3(randomPoints);
        var geometry = new THREE.TubeGeometry(randomSpline, 5, 2, 5);
        var mesh = new THREE.Mesh(geometry, null);
        mesh.rotation.set(Math.sin(j), Math.sin(j + 1), Math.sin(j + 0.5));
        mesh.updateMatrix();
        tentacleGeom.merge(geometry, mesh.matrix);
    }
    return(tentacleGeom);
}

function Tentacle(num) {
    var tentacleGeom = new THREE.Geometry();
    for (var j = 0; j < 2; j++) {
        var randomPoints = [];
        for (var i = 0; i < num; i++) {
            randomPoints.push(new THREE.Vector3(20 * i, 15 * Math.sin(j+i * num / 2), 0));
        }
        var randomSpline = new THREE.SplineCurve3(randomPoints);
        var geometry = new THREE.TubeGeometry(randomSpline, 5, 2, 5);
        var mesh = new THREE.Mesh(geometry, null);
        mesh.rotation.set(Math.sin(j), Math.sin(j + 1), Math.sin(j + 0.5));
        mesh.updateMatrix();
        tentacleGeom.merge(geometry, mesh.matrix);
    }
    return(tentacleGeom);
}

function TentacleStraight() {
    var tentacleGeom = new THREE.Geometry();
    for (var j = 0; j < 1; j++) {
        var randomPoints = [];
        randomPoints.push(new THREE.Vector3(0, 0, 0));
        for (var i = 0; i < 2; i++) {
            randomPoints.push(new THREE.Vector3(0, 0 - 300 * i, 0));
        }
        var randomSpline = new THREE.SplineCurve3(randomPoints);
        var geometry = new THREE.TubeGeometry(randomSpline, 2, 3, 2);
        var mesh = new THREE.Mesh(geometry, null);
        mesh.position.set(10 * Math.sin(j), 10 * Math.sin(j + 1), 10 * Math.sin(j + 0.5));
        mesh.updateMatrix();
        tentacleGeom.merge(geometry, mesh.matrix);
    }
    return(tentacleGeom);
}

function Grid(geom) {
    var tentacleGeom = new THREE.Geometry();
    for (var j = 0; j < 4; j++) {
        var geometry = geom;
        var mesh = new THREE.Mesh(geometry, null);
        mesh.position.set(10 * Math.sin(j), 10 * Math.sin(j + 1), 10 * Math.sin(j + 0.5));
        mesh.updateMatrix();
        tentacleGeom.merge(geometry, mesh.matrix);
    }
    return(tentacleGeom);
}

function updateBug(db, offset) {
    if (!movement || !db || !db.object || !db.object2)
        return;
    var object = db.object;
    var object2 = db.object2;
    timer += 0.6;

    object.rotation.z = Math.sin(timer * db.speed + offset) / 10;
    object2.rotation.z = -Math.sin(timer * db.speed + offset) / 10;

    object.position.y = Math.sin(timer * db.speed + offset) * 10 / 2;
    object2.position.y = Math.sin(timer * db.speed + offset) * 10 / 2;

    if (offset == selected || offset === 0) {
        rollOverObject.rotation.z = object.rotation.z;
        rollOverObject2.rotation.z = object2.rotation.z;

        rollOverObject.position.y = object.position.y;
        rollOverObject2.position.y = object2.position.y;
    }
}

function rgbToHex(r, g, b) {
    return "#" + componentToHex(Math.floor(r)) + componentToHex(Math.floor(g)) + componentToHex(Math.floor(b));
}

function componentToHex(c) {
    var hex = c.toString(16);
    return hex.length == 1 ? "0" + hex : hex;
}var globalDB = [];
var id = -1;
var featured = false;
var currentLocation = "/";



function preload(author, project) {
    showPreloader();
    loading = true;
    featured = false;
    loadingFeatured = false;
    var url = SERVER + "users/" + author + "/repos?per_page=50&sort=updated";

    if (author && author.replace(/^\/|\/$/g, '').indexOf('/') > -1) {
        url = SERVER + "search/repositories?q=" + encodeURIComponent(author.replace(/^\/|\/$/g, '')) + "&per_page=50&sort=updated";
    } else if (!author || author.length === 0) {
        url = SERVER + "search/repositories?q=stars:>1000&per_page=50&sort=stars";
        loadingFeatured = true;
    } else if (author == "blessedux") {
        url = SERVER + "users/blessedux/repos?per_page=50&sort=updated";
        loadingFeatured = true;
    }
    $.getJSON(url, function (data) {
        loading = false;

        if (data.message) {
            // no results
            hidePreloader();
            showNoResults(data.message);
            return;
        }

        // Handle GitHub API response format
        var repos = data.items || data; // data.items for search, data for user repos
        
        if (!repos || repos.length === 0) {
            hidePreloader();
            showNoResults("No repositories found");
            return;
        }

        globalDB = repos;
        featured = loadingFeatured;


        for (var i = 0; i < globalDB.length; i++) {
            var repo = globalDB[i];
            
            // Map GitHub API fields to expected format
            repo.username = repo.owner.login;
            repo.project = repo.name;
            repo.description = repo.description || "No description available";
            repo.link = repo.html_url;
            repo.favourites = repo.stargazers_count || 0;
            repo.is_favourites = false; // We'll implement this later if needed
            
            // Add missing properties that the UI expects
            repo.share = {
                "twitter": "https://twitter.com/intent/tweet?text=" + encodeURIComponent(repo.name + " - " + repo.description) + "&url=" + encodeURIComponent(repo.html_url),
                "fb": "https://www.facebook.com/sharer/sharer.php?u=" + encodeURIComponent(repo.html_url),
                "gplus": "https://plus.google.com/share?url=" + encodeURIComponent(repo.html_url),
                "tumblr": "https://www.tumblr.com/widgets/share/tool?canonicalUrl=" + encodeURIComponent(repo.html_url),
                "pinterest": "https://pinterest.com/pin/create/button/?url=" + encodeURIComponent(repo.html_url) + "&description=" + encodeURIComponent(repo.description),
                "link": repo.html_url
            };
            
            if (project && repo.link) {
                var last = repo.link.split('/');
                last = last[last.length - 1].toLowerCase();
                if (last == project && !MOBILE_VERSION) {
                    selected = i;
                }
            }

            // Generate realistic language data based on repository characteristics
            // In a real implementation, you'd fetch this from GitHub API /repos/{owner}/{repo}/languages
            var languages = ["JavaScript", "TypeScript", "Python", "Java", "C++", "C#", "Go", "Rust", "PHP", "Ruby", "Swift", "Kotlin", "HTML", "CSS", "Shell", "Dockerfile"];
            var p = {};
            
            // Generate 1-4 languages per repo with realistic sizes
            var numLanguages = Math.floor(Math.random() * 4) + 1;
            var totalSize = Math.floor(Math.random() * 5000) + 1000; // Total repo size
            
            for (var l = 0; l < numLanguages; l++) {
                var lang = languages[Math.floor(Math.random() * languages.length)];
                if (!p[lang]) {
                    var size = Math.floor(Math.random() * (totalSize / numLanguages)) + 100;
                    p[lang] = size;
                }
            }
            
            // Ensure we have at least one language
            if (Object.keys(p).length === 0) {
                p["JavaScript"] = Math.floor(Math.random() * 1000) + 100;
            }

            var converted = [];
            for (var key in p) {
                if (p.hasOwnProperty(key)) {
                    converted.push({
                        type: analyze(key),
                        size: p[key],
                        name: key
                    });
                }
            }
            repo.files = converted;
        }

        for (var j = 0; j < viewsNum; j++) {
            prepare(j, j);
        }

        if (selected == -1) {
            scrollToTop();
        } else {
            scrollTo(selected);
        }
        hidePreloader();

        if (!introPlayed && (author == "blessedux" || !author) && !project) {
            intro();
        } else {
            afterIntro();
            updateUI();
        }

    });
}



function analyze(extension) {
    var type = 0;

    for (var i = 0; i < TYPES.length; i++)
        if (TYPES[i] == extension)
            type = i;

    // if (type === 0 && extension != 'unknown')
    //     console.log('ANALYZE: ' + extension + ' not found');

    return type;
}



// Search suggestions functionality removed



// Hide suggestions functionality removed



// Search user functionality removed



function updateInfo(main, id, staticid) {

    if (!staticid) {
        staticid = id % viewsNum;
        if (staticid < 0)
            return;
    }

    var target = '#descmain';

    if ((id == -1 || !globalDB[id]) && main)
        return;

    if (!main)
        target = '#desc' + staticid;

    if (id === -1 || !globalDB[id]) {
        $(target).html('');
        return;
    }

    var db = globalDB[id];
    if (selected != -1 && main) {
        if (featured)
            updateLocation("blessedux" + "/" + db.username + "/" + db.project.substr(0, 50));
        else
            updateLocation(db.username + "/" + db.project.substr(0, 50));
    }

    if (!db.description)
        db.description = "";
    if (!db.project)
        db.project = "";
    if (!db.username)
        db.username = "";
    if (!db.link)
        db.link = "";
    if (!db.favourites)
        db.favourites = 0;
    if (!db.is_favourites)
        db.is_favourites = false;

    var filesList = "";
    if (db.files && db.files.length > 0) {
        for (var i = 0; i < db.files.length; i++)
            if (db.files[i].name != 'unknown')
                filesList += '<span class="language" data-language="' + db.files[i].name + '"><span>' + db.files[i].name + ": " + db.files[i].size + "</span></span><br/>";
    } else {
        filesList = '<span class="language" data-language="unknown"><span>No language data available</span></span><br/>';
    }

    var shares = {
        "twitter": {"label": "Twitter", "width": "", "height": ""},
        "fb": {"label": "Facebook", "width": "", "height": ""},
        "gplus": {"label": "Google+", "width": "", "height": ""},
        "tumblr": {"label": "Tumblr", "width": "", "height": ""},
        "pinterest": {"label": "Pinterest", "width": "", "height": ""},
        "link": {"label": "Get Link"}
    };

    var shareList = "";
    if (db.share) {
        $.each(db.share, function (type, url) {
            shareList += '<li><a href="' + url + '" class="button--label" data-share=\'{"type":"' + type + '", "width":"' + shares[type].width + '", "height":"' + shares[type].height + '"}\'><span class="button__icon"><i class="icon-' + type + '"></i></span><span class="button__label">' + shares[type].label + '</span></a></li>';
        });
    }
    if (!MOBILE_VERSION)
        shareList += '<li><a href="#" class="button--label  js-getlink"><span class="button__icon"><i class="icon-link"></i></span><span class="button__label">Get Link</span></a></li>';
    mobileClass = !MOBILE_VERSION && !!isDescOpen ? ' is-shown' : '';
    mobileStyle = MOBILE_VERSION || !isDescOpen ? ' style="display:none"' : '';

    /*jshint multistr: true */
    $(target).html('<div class="grid__rightside">\
            <div class="grid__title"><p>' + db.username + '</br>' + db.project.substr(0, 60) + '</p></div>\
            <div class="grid__wrap' + mobileClass + '"' + mobileStyle + '>\
                <div class="grid__text">\
                    <p>' + db.description.substr(0, 60) + '</p>\
                    <p><br/><br/>' + filesList + '<br/></p>\
                    <p><a href="' + db.link + '" target="_blank">view on GitHub</a></p>\
                </div>\
            </div>\
            <a href="#" class="grid__checkbox js-toggle-desc"></a>\
        </div>\
        <div class="grid__leftside">\
            <div class="grid__like"><a href="#" class="button--label js-like' + (db.is_favourites ? ' is-voted' : '') + '" data-voted="' + (db.is_favourites ? 1 : 0) + '" data-user="' + db.username + '" data-project="' + db.project + '" data-index="' + id + '"><span class="button__icon"><i class="icon-like"></i></span><span class="button__label amount">' + db.favourites + '</span></a></div>' +
            '<div class="grid__share dropdown tablet-hide">\
                <a href="#" class="button--label js-toggle-dropdown"><span class="button__icon"><i class="icon-share"></i></span><span class="button__label">Share</span></a>\
                <ul class="dropdown__list">' + shareList + '</ul>\
            </div>' +
            '<div class="grid__download dropdown tablet-hide">\
                <a href="#" class="button--label js-toggle-dropdown"><span class="button__icon"><i class="icon-download"></i></span><span class="button__label">Download</span></a>\
                <ul class="dropdown__list">\
                    <li><a href="#" class="button--label  js-toggle-download  tablet-hide"><span class="button__icon"><i class="icon-wallpaper"></i></span><span class="button__label">Wallpaper</span></a></li>\
                    <li><a href="#" class="button--label  js-download-gif  tablet-hide"><span class="button__icon"><i class="icon-gif"></i></span><span class="button__label">Gif</span></a></li>\
                </ul>\
            </div>\
        </div>');
}



function updateLocation(location) {
    if (!introPlayed) return;
    if (location) {
        location = location.toLowerCase();
        if(currentLocation != location)
            trackLocation(location);
        currentLocation = location;
    }
}



function trackLocation(location){
    if(typeof dataLayer !== 'undefined')
        dataLayer.push({
            'event':'virtualPageView',
            'url': "/" + location
        });
    $(".input_id").val(location);
    if (HISTORY_ENABLED)
        History.pushState({
            state: 1,
            viewing: location
        }, "Codeology/" + location, "/" + location);
}



function prepare(id, staticid) {

    var db = globalDB[id];
    
    if (id == selected)
        updateInfo(true, id);
    else
        updateInfo(false, id, staticid);
    
    var prevScale = 1;
    if (groups[staticid]) {
        var obj, i;
        for (i = groups[staticid].children.length - 1; i >= 0; i--) {
            obj = groups[staticid].children[i];
            groups[staticid].remove(obj);

        }
        prevScale = groups[staticid].scale.x;
        scene.remove(groups[staticid]);
        groups[staticid] = null;
    }

    if (db) {
        groups[staticid] = new THREE.Group();
        groups[staticid].scale.x = groups[staticid].scale.y = groups[staticid].scale.z = prevScale;
        TweenMax.killDelayedCallsTo(groups[staticid]);
        TweenMax.killTweensOf(groups[staticid]);
        TweenMax.to(groups[staticid].scale, 0.3, {delay: 0.5 * Math.random(), x: 1, y: 1, z: 1, ease: Back.easeOut});
        scene.add(groups[staticid]);

        bug(groups[staticid], db);
    }
}
var preloaderAnimationInterval;
var preloaderAnimationStep = 0;
var preloaderVisible = false;
var dropTimeout = null;
var aboutOpen = false;
var isDescOpen = true;

function intro() {
    if (SKIP_INTRO)
        return;
    setupPopup();
    $("#intro").delay(500).fadeIn(500);
    animatePopupText('intro');
}

function afterIntro() {
    introPlayed = true;

    headerHeight = 70;
    resizePostprocessing();

    $("#intro, #noresults").delay().fadeOut(500);
    $("#ui").addClass('is-shown');
    for (var i = 0; i < viewsNum; i++) {
        if (groups[i]) {
            TweenMax.killDelayedCallsTo(groups[i]);
            TweenMax.killTweensOf(groups[i]);
            TweenMax.to(groups[i].scale, 0.3, {delay: 1, x: 1, y: 1, z: 1});
        }
    }
}

function bindUI() {

    $('.fullscreen').off('click').on('click', toggleFullScreen);
    $('.grid').off('click').on('click', function () {
        showGrid();
    });

    $(window).off('.popup').on('resize.popup', function () {
        setupPopup();
        setupDropdown();
        updateHeaderLinks();
    });

    $('.js-refresh').off('click').on('click', function (e) {
        e.preventDefault();
        screenshot('wallpaper');
        return false;
    });

    $('.js-explore, .js-close-intro, .js-home').off('click').on('click', function (e) {
        e.preventDefault();
        if (!introPlayed) {
            afterIntro();
            showGrid();
        } else {
            preload('blessedux');
            showGrid('blessedux');
        }
        scrollToTop();

        $('.js-share.is-active').eq(0).trigger('click');
        $('.js-toggle-info.is-active').eq(0).trigger('click');
        $('.js-toggle-download.is-active').eq(0).trigger('click');
        $('.js-toggle-braintree.is-active').eq(0).trigger('click');
        $('.js-getlink.is-active').eq(0).trigger('click');

        return false;
    });

    // Search functionality removed

    // Toggle info functionality removed

    // Toggle braintree functionality removed

    $(".js-share").off('click').on("click", function (e) {
        e.preventDefault();

        $('.js-toggle-info.is-active').eq(0).trigger('click');
        $('.js-toggle-braintree.is-active').eq(0).trigger('click');
        $('.js-toggle-download.is-active').eq(0).trigger('click');
        $('.js-getlink.is-active').eq(0).trigger('click');
        hideSuggestions();

        var $this = $(e.currentTarget);
        var isActive = $this.toggleClass('is-active').hasClass('is-active');
        var html = $('.grid__share .dropdown__list').html();
        $('.js-mobile-share').html(html).toggleClass('is-open', isActive);
        bindUI();
        return false;
    });

    $('.js-getlink').off().on('click', function (e) {
        e.preventDefault();
        $('#getlink').fadeToggle();
        $('#js-getlink-input').val(window.location.href);
        $('#js-getlink-input')[0].setSelectionRange(0, $('#js-getlink-input')[0].value.length);
        $('.js-getlink').toggleClass('is-active');
        setupClipboardCopy();
        return false;
    });

    if (!MOBILE_VERSION) {
        $(".language").unbind('mouseenter mouseleave');
        $(".language").hover(function () {
            rolloverLanguage($(this).data('language'));
        }, function () {
            rolloverLanguage(null);
        });
    }

    // -----------------------------------------------------------------
    //                   .desc event listeners
    // -----------------------------------------------------------------

    $(".desc").off('.like').on("click.like", ".js-like", function (e) {
        var $this = $(this),
                $buttons = $('.js-like[data-index=' + $this.data('index') + ']'),
                $numbers = $buttons.find('.amount'),
                currentDB = globalDB[$(this).data('index')];

        if ($(this).data('voted') == "0") {
            $.getJSON(SERVER + "api/fav?action=add&user=" + $(this).data('user') + "&repo=" + $(this).data('project') + "&format=json", function (data) {
                $numbers.text(data.items.likes);
                currentDB.favourites = data.items.likes;
            });
            $buttons.data('voted', 1).addClass('is-voted');
            currentDB.is_favourites = true;
        } else {
            $.getJSON(SERVER + "api/fav?action=remove&user=" + $(this).data('user') + "&repo=" + $(this).data('project') + "&format=json", function (data) {
                $numbers.text(data.items.likes);
                currentDB.favourites = data.items.likes;
            });
            $buttons.data('voted', 0).removeClass('is-voted');
            currentDB.is_favourites = false;
        }
    });

    $(".desc").off('.desc').on("click.desc", ".js-toggle-desc", function (e) {
        e.preventDefault();
        var wrap = $(e.currentTarget).siblings('.grid__wrap');
        isDescOpen = !isDescOpen;
        if (!!isDescOpen)
            wrap.slideDown().addClass('is-shown');
        else
            wrap.slideUp().removeClass('is-shown');
        return false;
    });

    $(".desc").off('.dropdown').on("click.dropdown", ".js-toggle-dropdown", function (e) {
        e.preventDefault();
        var dropList = $(e.currentTarget).siblings('.dropdown__list'),
                isOpen = dropList.is(':visible'),
                other = $('.dropdown__list').not(dropList);
        dropList.fadeToggle(200);
        other.fadeOut(200);
        if (isOpen) {
            window.clearTimeout(dropTimeout);
            dropList.off('mousemove');
        } else {
            window.clearTimeout(dropTimeout);
            dropTimeout = window.setTimeout(closeDropList, 3000);
            dropList.off('mousemove').on('mousemove', function () {
                window.clearTimeout(dropTimeout);
                dropTimeout = window.setTimeout(closeDropList, 3000);
            });
        }
        return false;
    });

    $(".desc").off('.share').on("click.share", "[data-share]", function (e) {
        e.preventDefault();
        var data = $(e.currentTarget).data('share'),
                winWidth = data.width || 520,
                winHeight = data.height || 320,
                winTop = (screen.height / 2) - (winHeight / 2),
                winLeft = (screen.width / 2) - (winWidth / 2);
        window.open(e.currentTarget.href.replace('%url%', encodeURIComponent(window.location.href)), 'sharer', 'top=' + winTop + ',left=' + winLeft + ',toolbar=0,status=0,width=' + winWidth + ',height=' + winHeight);
        return false;
    });

    $(document).off('.wallpaper').on("click.wallpaper", '.js-toggle-download', toggleDownloadPopup);
    $(".desc").off('.gif').on("click.gif", '.js-download-gif', downloadGif);
}


function toggleDownloadPopup(e) {
    e.preventDefault();
    if (!$('#download.popup').is(':visible'))
        showDownloadPopup();
    else
        hideDownloadPopup();
    return false;
}

function showDownloadPopup() {

    $('.js-share.is-active').eq(0).trigger('click');
    $('.js-toggle-info.is-active').eq(0).trigger('click');
    $('.js-toggle-braintree.is-active').eq(0).trigger('click');
    $('.js-getlink.is-active').eq(0).trigger('click');
    hideSuggestions();

    $('.js-toggle-download').addClass('is-active');
    screenshot('wallpaper');
    $('#download.popup').fadeIn(500);
    setupPopup();
}

function downloadGif() {
    screenshot('gif');
}

function hideDownloadPopup() {
    $('.js-toggle-download').removeClass('is-active');
    $('#download.popup').fadeOut(500, function () {
        for (var i = 0; i < 6; i++) {
            $("#wallpaper" + i).attr("src", "").closest('a').attr('href', "").attr('download', "");
        }
    });
}

function closeDropList() {
    $('.dropdown__list').fadeOut(200);
}

var zeroInitialized = false;
function setupClipboardCopy() {
    if (!!zeroInitialized)
        return;
    ZeroClipboard.config({
        swfPath: '/src/js/libs-old/ZeroClipboard.swf',
        forceHandCursor: true
    });
    var client = new ZeroClipboard($('.js-copy'));
    client.on("ready", function (readyEvent) {
        client.on('copy', function (event) {
            event.clipboardData.setData('text/plain', window.location.href);
        });
        client.on("aftercopy", function (event) {
            $('.js-copy').fadeOut(400,
                    function () {
                        $('.js-copy').html('<span data-text="Copied">Copied</span>').fadeIn(600);
                    });
            console.log('Copied text to clipboard: ' + event.data['text/plain']);
            return false;
        });
    });
    client.on('error', function (event) {
        console.log('ZeroClipboard error of type "' + event.name + '": ' + event.message);
        ZeroClipboard.destroy();
        $('.js-copy').remove();
    });
    zeroInitialized = true;
}

function resetUI() {
    $(".js-share.is-active").eq(0).trigger('click');
    $(".js-toggle-info.is-active").eq(0).trigger('click');
    $('.js-toggle-braintree.is-active').eq(0).trigger('click');
    $('.js-toggle-download.is-active').eq(0).trigger('click');
}

function setupPopup() {
    $('.popup').each(function (i, o) {
        $(o).css('margin-top', -$(o).outerHeight() * 0.5);
    });
    $('.needs-scroll').each(function (i, o) {
        if (!$(o).hasClass('has-scroll')) {
            var myscroll = new IScroll(o, {mouseWheel: true});
            $(o).addClass('has-scroll').data('scroll', myscroll);
        } else {
            $(o).data('scroll').refresh();
        }
    });
}

function setupDropdown() {
    $('.dropdown__inner').css('max-height', $(window).height() - 80);
}

// Search input functionality removed

function showPreloader() {
    preloaderVisible = true;
    preloaderAnimationInterval = setInterval(animatePreloader, 80);
    for (var i = 0; i < viewsNum; i++) {
        $('#desc' + i).fadeOut(500);
    }
    for (var j = 0; j < viewsNum; j++) {
        if (groups[j] && introPlayed) {
            TweenMax.killDelayedCallsTo(groups[j]);
            TweenMax.killTweensOf(groups[j]);
            TweenMax.to(groups[j].scale, 0.3 + 0.3 * Math.random(), {delay: 0.1, x: 0.001, y: 0.001, z: 0.001, ease: Back.easeIn});
        }
    }
    $('.loader').fadeIn();
}

function hidePreloader() {
    preloaderVisible = false;
    for (var i = 0; i < viewsNum; i++) {
        $('#desc' + i).fadeIn(500);
    }
    for (var j = 0; j < viewsNum; j++) {
        if (groups[j] && introPlayed) {
            TweenMax.killDelayedCallsTo(groups[j]);
            TweenMax.killTweensOf(groups[j]);
            TweenMax.to(groups[j].scale, 0.3, {delay: 2 + 0.5 * Math.random(), x: 1, y: 1, z: 1, ease: Back.easeOut});
        }
    }
    $('.loader').fadeOut();
    clearInterval(preloaderAnimationInterval);
}

function animatePreloader() {
    var slashes = "";
    for (var i = 0; i < 5; i++) {
        if (i > preloaderAnimationStep && i < preloaderAnimationStep + 5) {
            slashes += "&nbsp;";
        } else {
            slashes += "/";
        }
    }
    preloaderAnimationStep++;

    if (preloaderAnimationStep > 4)
        preloaderAnimationStep = -5;

    $('.loader').html(slashes);
}


function showNoResults(message) {
    for (var i = 0; i < viewsNum; i++) {
        $('#desc' + i).fadeOut(500);
    }
    for (var j = 0; j < viewsNum; j++) {
        if (groups[j] && introPlayed) {
            TweenMax.killTweensOf(groups[j]);
            TweenMax.killDelayedCallsTo(groups[j]);
            TweenMax.to(groups[j].scale, 0.3 + 0.3 * Math.random(), {delay: 0.1, x: 0.001, y: 0.001, z: 0.001, ease: Back.easeIn});
        }
    }
    $('#noresults').delay(500).fadeIn(500)
            .find('.popup__copy p').text(message == '404' ? "Sorry, the page you're looking for doesn't exist." : "User has no projects.");
    $('#ui').removeClass('is-shown');
    $('.js-search-list').empty();
    setupPopup();
    animatePopupText('noresults');
}

function showCreature() {
    //if (globalDB[selected])
    //updateAlphabet(globalDB[selected].link.replace(/[^A-Za-z0-9-.,:;()]/gi, ''))
    if (!introPlayed)
        afterIntro();
    updateUI(true);
    if (!MOBILE_VERSION && globalDB[selected] && globalDB[selected].og_image != true) {
        TweenMax.killDelayedCallsTo(screenshot);
        TweenMax.delayedCall(1, screenshot, ["thumbnail"]);
    }
    selectedZoom = ZOOM_IN;
}

function showGrid(user) {
    if (!introPlayed)
        afterIntro();

    if (featured)
        updateLocation('blessedux');
    else if (user)
        updateLocation(user);
    else
        updateLocation(globalDB[0].username);

    selected = -1;
    updateUI(false);
}

function showPrev() {
    if (selected != -1) {
        selected--;
        if (selected < 0) {
            selected = globalDB.length - 1;
        }
        prepare(id);
    }
}

function showNext() {
    if (selected != -1) {
        selected++;
        if (selected >= globalDB.length) {
            selected = 0;
        }
        prepare(id);
    }
}

function setupUI() {
    $('html')
            .toggleClass('mobile', window.mobilecheck())
            .toggleClass('desktop', !window.mobilecheck());

    var langaguesArray = [];
    var languagesHTML = "";
    for (var i = 1; i < TYPES.length; i++) {
        var multiple = TYPES[i].split(',');
        for (var j = 0; j < multiple.length; j++)
            langaguesArray.push(multiple[j]);
    }
    langaguesArray.sort();
    for (var k = 0; k < langaguesArray.length; k++)
        languagesHTML += '<li class="language" data-language="' + langaguesArray[k] + '"><span>' + langaguesArray[k] + '</span></li>';
    languagesHTML = languagesHTML.substr(0, languagesHTML.length - 2);
    $('.language-list').html(languagesHTML);
}


function updateBreadcrumbs(main) {
    //console.log(main, selected);
    var html = '';
    if (!loading && globalDB && globalDB.length > 0 && (selected >= 0 || !featured) && introPlayed) {
        var db = globalDB[Math.max(selected, 0)];
        html += '<li class="breadcrumbs__item">' + db.username + '<a href="#" data-user="blessedux" class="button js-reset"><i class="icon-reset"></i></a></li>';
        if (selected >= 0 && (!!main || typeof main === 'undefined')) {
            html += '<li class="breadcrumbs__item">' + db.project.substr(0, 50) + '<a href="#" data-user="' + db.username + '" class="button is-project js-reset"><i class="icon-reset"></i></a></li>';
        }
    }

    $('.breadcrumbs')
            .html(html)
            .find('.js-reset').on('click', function (e) {
        e.preventDefault();
        var user = $(e.currentTarget).data('user');
        if (user == 'blessedux' || (user !== 'blessedux' && !!featured)) {
            preload(user);
            $('.js-search').val("Find a GitHub user");
        }
        else if (user !== 'blessedux') {
            $(".js-search").val(user);
        }
        showGrid(user);
        return false;
    });
}


function scrollToTop() {
    var temp = {"val": topGlobal};
    TweenMax.to(temp, 0.7, {val: 0, ease: Power2.easeOut, onUpdate: function () {
            topGlobal = temp.val;
        }});
}


function scrollTo(selectedNum) {
    var temp = {"val": topGlobal};
    TweenMax.to(temp, 0.7, {val: -headerHeight / (windowHeight + windowHeight) + Math.floor(selectedNum / 3) / 2 - 0.25, ease: Power2.easeOut, onUpdate: function () {
            topGlobal = temp.val;
        }});
}

function updateUI(main) {
    updateInfo(main, selected);
    bindUI();
    if (selected == -1) {
        $('#descmain').fadeOut(500);
        for (var i = 0; i < viewsNum; i++) {
            $('#desc' + i).show();
        }
        $('.grid').fadeOut(500);
    } else {
        $('#descmain').fadeIn(500);
        for (var j = 0; j < viewsNum; j++) {
            $('#desc' + j).hide();
        }
        $('.grid').fadeIn(500);
    }
    updateBreadcrumbs(main);
    updateHeaderLinks();
}


function updateHeaderLinks() {

    $('.js-header-links').show();

    var windowWidth = $(window).width(),
            leftWidth = $('.header__left').outerWidth(),
            rightWidth = $('.header__right').outerWidth();

    if (windowWidth - leftWidth < rightWidth)
        $('.js-header-links').hide();
}


function prevSuggestion() {
    var activeEl = $(document.activeElement);
    if (activeEl.parent().is('.search__item')) {
        if (activeEl.parent().prev().length < 1) {
            activeEl.parent().parent().siblings('.js-search').focus();
        } else {
            activeEl.parent().prev().find('a').focus();
        }
    }
}

function nextSuggestion() {
    var activeEl = $(document.activeElement);
    if (activeEl.is('input.js-search')) {
        activeEl.siblings('.js-search-list').find('a').eq(0).focus();
    } else if (activeEl.parent().is('.search__item')) {
        activeEl.parent().next().find('a').focus();
    }
}


var $typewriterEl;
function animatePopupText(id) {

    if ($typewriterEl && $typewriterEl[0])
        $typewriterEl.remove();

    var target = $('#' + id),
            typedSrc = target.find('.typed').css('position', 'relative').children();

    if (!typedSrc[0])
        return;

    $typewriterEl = $('<p class="typed-main">');

    typedSrc
            .css('visibility', 'hidden')
            .after($typewriterEl);

    $typewriterEl.empty().css({
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        marginTop: 0
    }).typed({
        strings: [$.trim(typedSrc.html())],
        loop: false,
        showCursor: false,
        startDelay: 0,
        typeSpeed: 0.0001
    });
}var camera, view, controls = [];
var selectedZoom = ZOOM_IN;
var deviceControlsEnabled = false;
var nextRenderScreenshot = {enabled: false};
var i, ii, min, max, newid;
var backgroundRocks, thisLoop;
var skipFPSCheck = false
var filterStrength = 2, dis = 300, spd = 5, animSpd = 5;
var frameTime = 80, lastLoop = new Date, slowCount = 0, tempPosition = new THREE.Vector3();

function setupScene() {

    container = document.getElementById('container');

    // multiple views
    for (ii = 0; ii < viewsNum; ii++) {
        var view = {};
        camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);
        view.camera = camera;
        view.width = 0;
        view.height = 0;
        view.left = 0;
        view.top = 0;
        view.topDiff = 0;
        if (!MOBILE_VERSION) {
            view.relativeDiff = -Math.floor(ii / 3) * 0.5;
        } else {
            view.relativeDiff = -ii - 1;
        }
        view.id = ii;
        view.i = ii;

        controls.push(new THREE.DeviceOrientationControls(camera, true));
        views.push(view);
    }

    // scene setup
    scene = new THREE.Scene();
    scene.fog = new THREE.Fog(0, 0, 10000);

    scene.add(new THREE.AmbientLight(0x444444));

    light = new THREE.SpotLight(0xffffff, 2);
    light.position.set(0, 500, 2000);

    scene.add(light);

    // background rocks
    var greymat = new THREE.MeshBasicMaterial({color: 0x444444,
        side: THREE.DoubleSide});

    for (var i = 0; i < 1; i++) {
        var geometry = new THREE.Geometry();

        for (var j = 0; j < 30; j++) {
            var pregeom;
            if (j % 2 === 0)
                pregeom = new THREE.BoxGeometry(600, 600, 600);//
            if (j % 2 == 1)
                pregeom = new THREE.TetrahedronGeometry(600, 0);
            //change_uvs( pregeom, 1/zoom1, 1/zoom2, Math.floor(Math.random()*zoom1), Math.floor(Math.random()*zoom2) );
            var submesh = new THREE.Mesh(pregeom);
            submesh.scale.x = submesh.scale.y = submesh.scale.z = 0.2 + Math.random() * 1;
            submesh.rotation.set(Math.random() * 3, Math.random() * 3, Math.random() * 3);
            while (submesh.position.distanceTo(scene.position) < 2000) {
                submesh.position.x = (Math.random() - 0.5) * 6000;
                submesh.position.y = (Math.random() - 0.5) * 6000;
                submesh.position.z = (Math.random() - 0.5) * 6000;
            }
            submesh.updateMatrix();
            geometry.merge(pregeom, submesh.matrix);
        }
    }

    backgroundRocks = new THREE.Mesh(geometry, greymat);
    TweenMax.from(backgroundRocks.scale, 3, {delay: 1.5, x: 4, y: 4, z: 4});
    scene.add(backgroundRocks);

    // core
    renderer = new THREE.WebGLRenderer({antialias: false, alpha: false});
    //renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize(window.innerWidth, window.innerHeight - headerHeight);
    renderer.domElement.style.position = "absolute";
    renderer.domElement.style.top = headerHeight + "px";
    container.appendChild(renderer.domElement);
    
    // events
    document.body.addEventListener('mousemove', onDocumentMouseMove, false);
    renderer.domElement.addEventListener('click', onMouseClick, false);
    $('.desc').on('click', onMouseClick);

    $(window).bind('mousewheel', function (event) {
        onMouseWheel(event.originalEvent);
    });
    $(window).bind('DOMMouseScroll', function (event) {
        onMouseWheel(event.originalEvent);
    });

    document.body.addEventListener('touchstart', touchstart, false);
    document.body.addEventListener('touchend', touchend, false);
    document.body.addEventListener('touchmove', touchmove, false);

    window.addEventListener('resize', onWindowResize, false);
    window.addEventListener('deviceorientation', initControls, false);

    document.onkeydown = checkKey;

    onWindowResize();

    lastLoop = new Date;
}

function initControls(event) {
    if (event.alpha) {
        window.removeEventListener('deviceorientation', initControls, false);
        deviceControlsEnabled = true;
        controls.connect();
        controls.update();
    }
}


function updateSize() {
    if (windowWidth != window.innerWidth || windowHeight != window.innerHeight - headerHeight) {
        windowWidth = window.innerWidth;
        windowHeight = window.innerHeight - headerHeight;
        renderer.setSize(windowWidth, windowHeight);
    }

}

function animate() {
    // fps check
    if (timer <= 20) {
        lastLoop = new Date();
    }
    if (timer > 20 && timer < 2000) {
        var thisFrameTime = (thisLoop = new Date()) - lastLoop;
        if (thisFrameTime < 10000) {
            frameTime += (thisFrameTime - frameTime) / filterStrength;
            lastLoop = thisLoop;

            fps = (1000 / frameTime);
            if (fps < MIN_FPS && !skipFPSCheck) {
                slowCount++;
                if (slowCount > 10) {
                    noWebGL();
                    return;
                }
            } else {
                slowCount = 0;
            }
        }
    }

    for (var i = 0; i < globalDB.length; i++) {
        updateBug(globalDB[i], i);
    }
    render();
    requestAnimationFrame(animate);
}

function render(fast) {
    rendertime -= mouseX / 80;

    updateSize();
    if (nextRenderScreenshot.enabled) {
        windowWidth = nextRenderScreenshot.width;
        windowHeight = nextRenderScreenshot.height;
        renderer.setSize(windowWidth, windowHeight);
        resizePostprocessing();
    }

    for (i = 0; i < viewsNum; i++) {
        if (groups[i])
            groups[i].visible = false;
    }

    topGlobal -= delta;

    min = 0;
    if (topGlobal < min)
        topGlobal -= (topGlobal - min) / 5;

    max = Math.floor(((globalDB.length / viewsNum * 3 / 2) - 1) * 2) / 2 + 0.5;
    if (globalDB.length % 3 === 0 && !MOBILE_VERSION)
        max -= 0.5;
    if (topGlobal > max) {
        topGlobal -= (topGlobal - max) / 5;
    }
    if (globalDB.length <= 6)
        topGlobal = min;

    renderer.clear();
    for (ii = 0; ii < viewsNum; ++ii) {

        view = views[ii];
        camera = view.camera;

        if (groups[ii] && !rolloverMesh) {
            groups[ii].visible = true;
        }
        if (i > 0 && groups[ii - 1])
            groups[ii - 1].visible = false;

        view.topDiff = 0;
        dis = topGlobal + view.relativeDiff;
        if (!MOBILE_VERSION) {
            while ((dis) > 0.5) {
                view.topDiff -= 1.5;
                dis -= 1.5;
            }
        } else {
            while ((dis) > 0) {
                view.topDiff -= 2;
                dis -= 2;
            }
        }
        newid = view.i + Math.floor(-view.topDiff / 1.5 * viewsNum);
        if (view.id != newid) {
            view.id = newid;
            TweenMax.delayedCall(view.i / 100, prepare, [view.id, view.i]);
        }

        if (!MOBILE_VERSION) {
            newWidth = {width: 0.333, height: 0.5, left: 0.333 * (ii % 3), top: topGlobal + view.topDiff + view.relativeDiff};
        } else {
            newWidth = {width: 1, height: 1, left: 0, top: topGlobal + view.topDiff + view.relativeDiff};
        }
        if (!loading) {
            backgroundRocks.material.color.setHSL(0.5 + Math.sin(ii), 0.10, 0.25);
        } else {
            backgroundRocks.material.color.setRGB(0, 0, 0);
        }
        light.color.setHSL(Math.sin(ii * 123.2) / 2 + 0.5, 1, 0.8);

        // renderer sizes
        if (aboutOpen) {
            if (ii === 0) {
                newWidth.width = 0.6;
                newWidth.height = 1;
                newWidth.left = 0.4;
                newWidth.top = -1;
            } else {
                newWidth.width = 0;
                if (ii % 3 == 1)
                    newWidth.width = 1;
                newWidth.height = 0;
                if (ii % 3 === 0 || ii % 3 == 2)
                    newWidth.height = 1;
                newWidth.left = 0;
                if (ii % 3 == 2)
                    newWidth.left = 1;
                newWidth.top = 1;
            }
        } else if (selected != -1) {
            if (selected == view.id) {
                newWidth.width = 1;
                newWidth.height = 1;
                newWidth.left = 0;
                newWidth.top = -1;
            } else {
                newWidth.width = 0;
                if (ii % 3 == 1)
                    newWidth.width = 1;
                newWidth.height = 0;
                if (ii % 3 === 0 || ii % 3 == 2)
                    newWidth.height = 1;
                newWidth.left = 0;
                if (ii % 3 == 2)
                    newWidth.left = 1;
                newWidth.top = 1;

            }
        }

        animSpd = 5;
        if (MOBILE_VERSION || nextRenderScreenshot.enabled || fast) {
            animSpd = 1;
        }
        
        // animate views
        view.width -= (view.width - newWidth.width) / animSpd;
        view.height -= (view.height - newWidth.height) / animSpd;
        view.left -= (view.left - newWidth.left) / animSpd;
        view.top -= (view.top - newWidth.top) / animSpd;
        if (view.height < 0.55) {
            view.top = newWidth.top;
        }

        // rollovers
        if (!MOBILE_VERSION) {
            $('#desc' + ii).css({
                'top': parseInt(-view.top * windowHeight + headerHeight, 10),
                'left': view.left * windowWidth,
                'width': view.width * windowWidth,
                'height': view.height * windowHeight
            });
        } else {
            $('#desc' + ii).css({
                'top': parseInt((-view.top - 1) * windowHeight + headerHeight, 10),
                'left': view.left * windowWidth,
                'width': view.width * windowWidth,
                'height': view.height * windowHeight
            });
        }

        // animate camera
        dis = 300;
        tempPosition = new THREE.Vector3();
        if (!MOBILE_VERSION && (view.id == selected || (-view.top < 0.5 + mouseY && -view.top + view.height > 0.5 + mouseY && view.left < 0.5 + mouseX && view.left + view.width > 0.5 + mouseX))) {
            if (view.id == selected)
                dis = selectedZoom;
            tempPosition.x = -Math.sin(ii + -mouseX * 5 + rendertime) * dis;
            tempPosition.y = -Math.sin(-mouseY * 2) * dis;
            tempPosition.z = -Math.cos(ii + -mouseX * 5 + rendertime) * dis;

            rolledover = view.id;
        } else {
            dis = 500;
            tempPosition.x = -Math.sin(ii + mouseX * 0 + rendertime) * dis;
            tempPosition.y = -Math.sin(mouseY * 0) * dis;
            tempPosition.z = -Math.cos(ii + mouseX * 0 + rendertime) * dis;
        }
        if (!deviceControlsEnabled) {
            camera.position.x -= (camera.position.x - tempPosition.x) / animSpd;
            camera.position.y -= (camera.position.y - tempPosition.y) / animSpd;
            camera.position.z -= (camera.position.z - tempPosition.z) / animSpd;
        } else {
            controls[ii].update();

            camera.position.set(0, 0, 0)
            camera.translateZ(cameraDistance);
        }
        if (nextRenderScreenshot.enabled) {
            if (nextRenderScreenshot.type == "wallpaper") {
                dis = ZOOM_IN_MIN + Math.random() * (ZOOM_IN_MAX - ZOOM_IN_MIN);
                camera.rotation.set(Math.random() * Math.PI * 2, Math.random() * Math.PI * 2, Math.random() * Math.PI * 2);
                camera.position.set(0, 0, 0);
                camera.translateZ(dis);
            } else if (nextRenderScreenshot.type == "gif") {
                dis = (ZOOM_IN_MIN + ZOOM_IN_MAX) / 2;
                camera.rotation.set(0, Math.PI * 2 * nextRenderScreenshot.id / nextRenderScreenshot.num, 0);
                camera.position.set(0, 0, 0);
                camera.translateZ(dis);
            } else if (nextRenderScreenshot.type == "thumbnail") {
                dis = ZOOM_IN_MIN;
                camera.rotation.set(-.1, .1, 0);
                camera.position.set(0, 0, 0);
                camera.translateZ(dis);
            }
        }
        camera.lookAt((scene.position));

        light.position.x = camera.position.x + 100;
        light.position.y = camera.position.y + 100;
        light.position.z = camera.position.z;

        //and render

        var left = Math.floor(windowWidth * view.left);
        var bottom = Math.floor((windowHeight) * (view.top + (view.height)));
        var width = Math.floor(windowWidth * view.width);
        var height = Math.floor(windowHeight * view.height);
        if (view.width > 0.1 && view.height > 0.1 && view.id < globalDB.length) {
            renderer.setViewport(left, bottom, width, height);
            renderer.setScissor(left, bottom, width, height);
            renderer.enableScissorTest(true);

            camera.aspect = width / height;
            camera.updateProjectionMatrix();

            if (asciiShader.enabled) {
                renderer.render(scene, camera, asciiShader.rtTextureColor, true);
            } else {
                renderer.render(scene, camera);
            }
        }
    }

    // postprocessing
    if (asciiShader.enabled) {
        var size = (0.2 + 0.8 * windowHeight / 600 / 4) * 1.5;
        if (size < .5)
            size = .5;
        //if (window.devicePixelRatio)
        //    size /= window.devicePixelRatio
        if (selected != -1 && !MOBILE_VERSION) {
            size *= 1.3;
        }
        if (nextRenderScreenshot.enabled) {
            size *= 0.8;
            if (nextRenderScreenshot.type == "gif") {
                size *= 1.2;
            }
            if (nextRenderScreenshot.type == "thumbnail") {
                size *= 1.5;
            }
        }
        if (MOBILE_VERSION) {
            size *= 1.5;
        }
        uniforms[ 'fontSize'].value = new THREE.Vector2(Math.floor(size * fontWidth), Math.floor(size * fontHeight));
        uniforms[ 'charMapSize'].value = charNum * Math.floor(fontWidth * size);

        renderer.setViewport(0, 0, windowWidth, windowHeight);
        renderer.setScissor(0, 0, windowWidth, windowHeight);
        renderer.render(asciiShader.scene, asciiShader.camera);

        renderer.render(scene, camera, asciiShader.rtTextureColor, true);
    }
    
    // and screenshots
    if (nextRenderScreenshot.enabled) {
        screenshotCompose();
        if (nextRenderScreenshot.type == "thumbnail") {
            nextRenderScreenshot = {enabled: false};
        } else if (nextRenderScreenshot.type == "wallpaper") {
            if (nextRenderScreenshot.id <= nextRenderScreenshot.num - 2) {
                nextRenderScreenshot.id++;
                render(true);
            } else {
                nextRenderScreenshot = {enabled: false};
            }
        } else if (nextRenderScreenshot.type == "gif") {
            if (nextRenderScreenshot.id <= nextRenderScreenshot.num - 2) {
                nextRenderScreenshot.id++;
                render(true);
            } else {
                nextRenderScreenshot = {enabled: false};
            }
        } else {
            nextRenderScreenshot = {enabled: false};
        }

        onWindowResize();
        render(true);
    }
    delta -= delta / 15;
}var state = 0;
var rotateStart = new THREE.Vector2();
var rotateEnd = new THREE.Vector2();

var dollyStart = new THREE.Vector2();
var dollyEnd = new THREE.Vector2();
var dollyDelta = new THREE.Vector2();

var cameraDistance = 650;

var touching = false;

function onMouseClick(event) {
    if (event.target.target != '_blank' && $(event.target).attr('href') != "#") {
        $('.js-share.is-active').eq(0).trigger('click');
        $('.js-toggle-info.is-active').eq(0).trigger('click');
        $('.js-toggle-download.is-active').eq(0).trigger('click');
        $('.js-toggle-braintree.is-active').eq(0).trigger('click');

        if (rolledover != -1) {
            if (selected == -1 && (rolledover < globalDB.length) && viewsNum == 9) {
                selected = rolledover;
                showCreature();
            } else {
                showGrid();
            }
        }
    }
}

function onMouseWheel(event) {
    if ($(event.target).closest('.has-scroll').length <= 0) {
        event.preventDefault();
        event.stopPropagation();

        if (event.wheelDelta !== undefined) {
            selectedZoom -= event.wheelDelta / 10;
        } else {
            selectedZoom -= event.detail / 10 * 20;
        }
        if (selectedZoom < ZOOM_IN_MIN)
            selectedZoom = ZOOM_IN_MIN;
        if (selectedZoom > ZOOM_IN_MAX)
            selectedZoom = ZOOM_IN_MAX;
        if (selected != -1)
            return;

        delta = 0;

        if (event.wheelDelta !== undefined) { // WebKit / Opera / Explorer 9

            delta = event.wheelDelta;

        } else if (event.detail !== undefined) { // Firefox

            delta = -event.detail * 20;

        }

        if (window.devicePixelRatio)
            delta *= window.devicePixelRatio;

        delta /= 5000;
    }

}

function touchstart(event) {
    touching = !$(event.target).closest('.header').length && !$(event.target).closest('.popup').length;
    if (!!touching) {
        switch (event.touches.length) {
            case 1:
                state = 1;
                rotateStart.set(event.touches[ 0 ].pageX, event.touches[ 0 ].pageY);
                break;
            case 2:
                state = 2;
                var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
                var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;
                var distance = Math.sqrt(dx * dx + dy * dy);
                dollyStart.set(0, distance);
                break;
            case 3:
                break;
            default:
                state = 0;
        }
    }

}

function touchmove(event) {
    if (!!touching) {
        event.preventDefault();
        event.stopPropagation();
        switch (event.touches.length) {
            case 1:
                if (state !== 1)
                    return;
                rotateEnd.set(event.touches[ 0 ].pageX, event.touches[ 0 ].pageY);
                delta = -(rotateStart.y - rotateEnd.y) / 500;
                deltaX = (rotateStart.x - rotateEnd.x) / 500;
                rotateStart.set(event.touches[ 0 ].pageX, event.touches[ 0 ].pageY);
                if (selected != -1)
                    delta = -delta;
                break;
            case 2:
                if (state !== 2)
                    return;
                var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
                var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;
                var distance = Math.sqrt(dx * dx + dy * dy);
                dollyEnd.set(0, distance);
                dollyDelta.subVectors(dollyEnd, dollyStart);
                if (dollyDelta.y > 0) {
                    cameraDistance -= dollyDelta.y * cameraDistance / 100;
                } else if (dollyDelta.y < 0) {
                    cameraDistance -= dollyDelta.y * cameraDistance / 100;
                }
                if (cameraDistance < ZOOM_IN_MIN)
                    cameraDistance = ZOOM_IN_MIN;
                if (cameraDistance > ZOOM_IN_MAX)
                    cameraDistance = ZOOM_IN_MAX;
                dollyStart.copy(dollyEnd);
                break;
            case 3:
                break;
            default:
                state = 0;
        }
    }

}

function touchend( ) {
    state = 0;
}

function checkKey(e) {
    var keynum;
    if (window.event) { // IE					
        keynum = e.keyCode;
    } else
    if (e.which) { // Netscape/Firefox/Opera					
        keynum = e.which;
    }
    var k = String.fromCharCode(keynum).toLowerCase();
    if (Number(k) == k) {
        asciiMode = Number(k);
        asciiShader.enabled = true;
        uniforms[ 'mode' ].value = Number(k);
    }
    if (keynum == '192') {
        asciiShader.enabled = !asciiShader.enabled;
    }
    if (keynum == '191') {
        geoms = shuffle(geoms)
        var tempTopGlobal = topGlobal;
        topGlobal = 100;
        render(false)
        topGlobal = tempTopGlobal;

    }
    if (keynum == '38')
        prevSuggestion();
    else if (keynum == '40')
        nextSuggestion();
}

function onDocumentMouseMove(event) {
    mouseX = (event.clientX - windowWidth / 2) / windowWidth;
    mouseY = ((event.clientY - headerHeight) - windowHeight / 2) / windowHeight;
}

function onWindowResize() {
    updateSize();
    resizePostprocessing();
}
var wireframe = false;
var movement = true;
var delta = 0,deltaX = 0
var rendertime = 0
var groups = []
var container, stats;
var difference = 0;
var views, scene, renderer;
var mesh, light;
var mouseX = 0, mouseY = 0;
var windowWidth, windowHeight;
var selected = -1;
var rolledover = -1;
var views = [];
var topGlobal = 0;
var introPlayed = false;
var preloader;
var headerHeight = 0;

var viewsNum = 9;
if (MOBILE_VERSION) {
    viewsNum = 2;
}
var newWidth;


$(document).ready(function () {
    init();
});

function init() {

    $.ajaxSetup({cache: true});

    FastClick.attach(document.body);

    if (!Detector.webgl) {
        noWebGL();
        return;
    }

    // prepareInput(); // Removed - no search functionality

    setupHistory();
    setupScene();
    initPostprocessing();
    resizePostprocessing();
    bugGlobals();
    setupUI();
    updateUI();
    bindUI();
    animate();

    //preload("blessedux");
}

function noWebGL() {
    window.location.href = "/error";
}

window.addEventListener("load",function() {
  setTimeout(function(){
    window.scrollTo(0, 1); // Hide the address bar!
  }, 0);
});
